/*
 * ChatGUI.java
 *
 * Created on 29 de Setembro de 2005, 10:30
 */

import java.net.*;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Chat usando sockets TCP
 * @author  rcampiol
 */
public class ChatGUI extends javax.swing.JFrame {
    
    /* declaracao de variaveis */
    private Socket clienteSocket;    // socket para acessar a rede
    private MulticastSocket mcSocket ;    // socket para acessar a rede
    private InetAddress group 
    private ObjectInputStream in;      // leitura
    private ObjectOutputStream out;    // escrita
    
    private ClientListener clientListener;     // thread que recebe mensagens
    private HashMap hostList;        //lista com o apelido e IPs dos clientes 
    
    private DatagramSocket clientSocket;
    private DatagramPacket clientPacket;
    
    
    /** Creates new form ChatGUI */
    public ChatGUI() {
        initComponents();
    } //construtor
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlMensagem = new javax.swing.JPanel();
        txtMensagem = new javax.swing.JTextField();
        btnEnviar = new javax.swing.JButton();
        scrollArea = new javax.swing.JScrollPane();
        areaMensagem = new javax.swing.JTextArea();
        pnlConfiguracao = new javax.swing.JPanel();
        pnlOpcoes = new javax.swing.JPanel();
        lblIP = new javax.swing.JLabel();
        lblPorta = new javax.swing.JLabel();
        lblApelido = new javax.swing.JLabel();
        txtIP = new javax.swing.JTextField();
        txtPorta = new javax.swing.JTextField();
        txtApelido = new javax.swing.JTextField();
        pnlBotoes = new javax.swing.JPanel();
        btnConectar = new javax.swing.JButton();
        btnDesconectar = new javax.swing.JButton();
        lstLista = new javax.swing.JList();

        getContentPane().setLayout(new java.awt.BorderLayout(3, 1));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("mIRC Simplificado");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnlMensagem.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 2));

        txtMensagem.setColumns(30);
        txtMensagem.setMinimumSize(new java.awt.Dimension(19, 19));
        pnlMensagem.add(txtMensagem);

        btnEnviar.setMnemonic('E');
        btnEnviar.setText("Enviar");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        pnlMensagem.add(btnEnviar);

        getContentPane().add(pnlMensagem, java.awt.BorderLayout.NORTH);

        areaMensagem.setColumns(30);
        areaMensagem.setRows(10);
        scrollArea.setViewportView(areaMensagem);

        getContentPane().add(scrollArea, java.awt.BorderLayout.CENTER);

        pnlConfiguracao.setLayout(new java.awt.BorderLayout());

        pnlConfiguracao.setBorder(new javax.swing.border.TitledBorder(null, " Configura\u00e7\u00f5es ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        pnlOpcoes.setLayout(new java.awt.GridBagLayout());

        pnlOpcoes.setMinimumSize(new java.awt.Dimension(124, 19));
        pnlOpcoes.setPreferredSize(new java.awt.Dimension(210, 19));
        lblIP.setText("Servidor: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlOpcoes.add(lblIP, gridBagConstraints);

        lblPorta.setText("Porta: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlOpcoes.add(lblPorta, gridBagConstraints);

        lblApelido.setText("Apelido: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlOpcoes.add(lblApelido, gridBagConstraints);

        txtIP.setColumns(10);
        txtIP.setText("127.0.0.1");
        txtIP.setMinimumSize(new java.awt.Dimension(124, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlOpcoes.add(txtIP, gridBagConstraints);

        txtPorta.setColumns(6);
        txtPorta.setText("5000");
        txtPorta.setMinimumSize(new java.awt.Dimension(70, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlOpcoes.add(txtPorta, gridBagConstraints);

        txtApelido.setColumns(10);
        txtApelido.setText("Padr\u00e3o");
        txtApelido.setMinimumSize(new java.awt.Dimension(114, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlOpcoes.add(txtApelido, gridBagConstraints);

        pnlConfiguracao.add(pnlOpcoes, java.awt.BorderLayout.WEST);

        pnlBotoes.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        btnConectar.setMnemonic('E');
        btnConectar.setText("Entrar no grupo");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        pnlBotoes.add(btnConectar);

        btnDesconectar.setMnemonic('S');
        btnDesconectar.setText("Sair do grupo");
        btnDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesconectarActionPerformed(evt);
            }
        });

        pnlBotoes.add(btnDesconectar);

        pnlConfiguracao.add(pnlBotoes, java.awt.BorderLayout.EAST);

        getContentPane().add(pnlConfiguracao, java.awt.BorderLayout.SOUTH);

        lstLista.setBorder(new javax.swing.border.EtchedBorder());
        lstLista.setFont(new java.awt.Font("Dialog", 0, 10));
        lstLista.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstLista.setFixedCellWidth(100);
        lstLista.setPreferredSize(new java.awt.Dimension(100, 0));
        getContentPane().add(lstLista, java.awt.BorderLayout.EAST);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.btnDesconectarActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {try {
        //GEN-FIRST:event_btnConectarActionPerformed
        this.group = InetAddress.getByName(txtIP.getText());
        mcSocket = new MulticastSocket(Integer.getInteger(txtPorta.getText()));
        mcSocket.joinGroup(group);
        
        Mensagem msg = new Mensagem(((Integer) 1).byteValue(), txtApelido.getText()
                , "JOIN ["+ txtApelido.getText() +"]");
        
        byte [] bytesToSend = msg.getBytes();
        DatagramPacket messageOut = new DatagramPacket(bytesToSend, bytesToSend.length, group, Integer.parseInt(txtPorta.getText()));
        mcSocket.send(messageOut);	
        
        clientListener = new ClientListener(this, txtPorta.getText(), mcSocket); 
        clientListener.run();
        
        
        /** Implementar o entrar no grupo **/
        } catch (UnknownHostException ex) {
            Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        
        
    }//GEN-LAST:event_btnConectarActionPerformed

    private void btnDesconectarActionPerformed(java.awt.event.ActionEvent evt) {try {
        //GEN-FIRST:event_btnDesconectarActionPerformed
        /** Implementar o sair do grupo **/
        mcSocket.leaveGroup(this.group);		
        } catch (IOException ex) {
            Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDesconectarActionPerformed

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
       String msg = txtMensagem.getText();
       if ((msg.trim().length() > 0) && (lstLista.getSelectedIndex()!=-1)) {
           /* obtem o IP do destinatario */
           InetAddress ipTarget = (InetAddress)hostList.get(lstLista.getSelectedValue());
       }
       
       /** Implementar o enviar para o grupo ou individuo */

    }//GEN-LAST:event_btnEnviarActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatGUI().setVisible(true);
            }
        });
    } //main
    
    
    /**
    * Escreve uma mensagem na �rea de mensagens
    */
    public void writeMessage(String id, String mensagem) {
        areaMensagem.append("<" + id + "> " + mensagem + "\n");
        areaMensagem.setCaretPosition(areaMensagem.getText().length());
    } //writeMessage
    
    
    /**
     * Adiciona um apelido a lista
     */
    public void addNickname(String apelido, String IP) {
        try {
            hostList.put(apelido, InetAddress.getByName(IP));
            // atualizar a interface
        } catch (UnknownHostException uhe) {
            System.out.println ("Host inexistente");
        } //catch   
    } //addNickname
    
    
    /**
     * Remove um apelido da lista
     */
    public void remNickname(String apelido) {
        hostList.remove(apelido);
    } //remNickname
    
    
    /**
     * Retorna o apelido local
     */
    public String getApelido() {
         return txtApelido.getText();
    } //getApelido
    
    
    /**
     * Envia uma mensagem para a rede 
     */
    private void sendMessage(String mensagem, InetAddress ipHost) {
        /** implementar o enviar mensagem */
        Mensagem msg = new Mensagem(((Integer )3).byteValue(), getApelido(), mensagem);
        byte [] bytesToSend = msg.getBytes();
        DatagramPacket messageOut = new DatagramPacket(bytesToSend, bytesToSend.length, group, Integer.parseInt(txtPorta.getText()));
        try {	
            mcSocket.send(messageOut);
        } catch (IOException ex) {
            Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    } //sendMessage

    
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaMensagem;
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnDesconectar;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JLabel lblApelido;
    private javax.swing.JLabel lblIP;
    private javax.swing.JLabel lblPorta;
    private javax.swing.JList lstLista;
    private javax.swing.JPanel pnlBotoes;
    private javax.swing.JPanel pnlConfiguracao;
    private javax.swing.JPanel pnlMensagem;
    private javax.swing.JPanel pnlOpcoes;
    private javax.swing.JScrollPane scrollArea;
    private javax.swing.JTextField txtApelido;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextField txtMensagem;
    private javax.swing.JTextField txtPorta;
    // End of variables declaration//GEN-END:variables
    
}
